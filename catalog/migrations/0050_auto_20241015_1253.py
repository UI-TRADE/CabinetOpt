# Generated by Django 4.1.7 on 2024-10-15 09:53

from django.db import migrations
from rest_framework.serializers import ModelSerializer


def copy_collection_groups(apps, schema_editor):

    CollectionGroup = apps.get_model("catalog", "CollectionGroup")
    СategoryGroup = apps.get_model("catalog", "СategoryGroup")

    class CollectionGroupSerializer(ModelSerializer):
        class Meta:
            model = CollectionGroup
            fields = '__all__'

    qs = CollectionGroup.objects.all()
    for collection_group in qs:
        category_group = СategoryGroup(**{
            key: value for key, value in \
                CollectionGroupSerializer(collection_group).data.items() if key != 'id'
        })
        category_group.save()


def copy_collections(apps, schema_editor):

    CollectionGroup = apps.get_model("catalog", "CollectionGroup")
    СategoryGroup = apps.get_model("catalog", "СategoryGroup")
    Collection = apps.get_model("catalog", "Collection")
    Сategory = apps.get_model("catalog", "Сategory")

    class CollectionGroupSerializer(ModelSerializer):
        class Meta:
            model = CollectionGroup
            fields = '__all__'


    class CollectionSerializer(ModelSerializer):

        group = CollectionGroupSerializer()

        class Meta:
            model = Collection
            fields = '__all__'


    def get_category_group(category_group_params):
        return СategoryGroup.objects.create(**{
            key: value for key, value in category_group_params.items() if key != 'id'
        })

    qs = Collection.objects.all()
    for collection in qs:
        params = {key: value if key != 'group' else get_category_group(dict(value)) for key, value in \
            CollectionSerializer(collection).data.items() if key != 'id'}
        category = Сategory(**params)
        category.save()


class Migration(migrations.Migration):

    dependencies = [
        ('catalog', '0049_сategorygroup_сategory'),
    ]

    operations = [
        migrations.RunPython(copy_collections),
    ]
